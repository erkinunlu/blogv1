// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "mysql"
	url      = env("DATABASE_URL")
}

enum Role {
	admin
	editor
	user
}

model User {
	id           Int      @id @default(autoincrement())
	name         String
	email        String   @unique
	passwordHash String
	role         Role     @default(user)
	posts        Post[]
	createdAt    DateTime @default(now())
	updatedAt    DateTime @updatedAt
}

model Category {
	id        Int      @id @default(autoincrement())
	name      String   @unique
	slug      String   @unique
	posts     Post[]   @relation("PostCategories")
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}

model Tag {
	id        Int      @id @default(autoincrement())
	name      String   @unique
	slug      String   @unique
	posts     Post[]   @relation("PostTags")
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}

model Post {
	id          Int         @id @default(autoincrement())
	title       String
	slug        String      @unique
	excerpt     String?
	content     String
	coverImage  String?
	published   Boolean    @default(false)
	publishedAt DateTime?
	authorId    Int
	author      User        @relation(fields: [authorId], references: [id])
	categories  Category[] @relation("PostCategories")
	tags        Tag[]       @relation("PostTags")
	comments    Comment[]
	createdAt   DateTime   @default(now())
	updatedAt   DateTime   @updatedAt
}

model Comment {
	id        Int      @id @default(autoincrement())
	postId    Int
	post      Post     @relation(fields: [postId], references: [id])
	name      String
	email     String
	content   String
	approved  Boolean  @default(false)
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}
